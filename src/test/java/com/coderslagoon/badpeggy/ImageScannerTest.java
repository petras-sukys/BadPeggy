package com.coderslagoon.badpeggy;

import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertTrue;
import static org.junit.Assert.fail;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.image.BufferedImage;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.PrintWriter;
import java.io.RandomAccessFile;
import java.util.Arrays;
import java.util.Iterator;
import java.util.Random;

import javax.imageio.IIOImage;
import javax.imageio.ImageIO;
import javax.imageio.ImageWriteParam;
import javax.imageio.ImageWriter;
import javax.imageio.plugins.jpeg.JPEGImageWriteParam;

import org.junit.Assert;
import org.junit.Test;

import com.coderslagoon.badpeggy.scanner.ImageFormat;
import com.coderslagoon.badpeggy.scanner.ImageScanner;
import com.coderslagoon.baselib.imaging.Resolution;
import com.coderslagoon.baselib.util.BinUtils;

public class ImageScannerTest implements ImageScanner.Callback {

    static boolean DUMP_FILES         = false;
    static boolean PRINT_MESSAGES     = true;
    static boolean USE_EXISTING       = false;
    static boolean DO_VERIFY          = true;
    static boolean RECORD_NODETECTS   = false;
    static boolean RECORD_RESULTCODES = false;

    ///////////////////////////////////////////////////////////////////////////

    Random rnd = new Random(0xbaadbeef);

    enum Fill {
        EMPTY,
        NOISE,
        RNDBLOCKS
    }

    ///////////////////////////////////////////////////////////////////////////

    enum Damage {
        /** don't damage the file */
        NONE(new Transform() {
            byte[] process(byte[] data, Random rnd) {
                return data;
            }
        }),
        /** 10% left from the beginning of the file */
        TRUNCATE_10(new TransformTruncate(10)),
        /** 50% left from the beginning of the file */
        TRUNCATE_50(new TransformTruncate(50)),
        /** 99% left from the beginning of the file */
        TRUNCATE_99(new TransformTruncate(99)),
        /** random bit flips (low count, random) */
        BITFLIP_LOW(new TransformBitflip(500)),
        /** random bit flips (high count, random) */
        BITFLIP_HIGH(new TransformBitflip(100)),
        /** set the first 10 bytes to zero */
        CLEAR_BEGIN_10(new TransformClear(10, true)),
        /** set the last 10 bytes to zero */
        CLEAR_END_10(new TransformClear(10, false)),
        /** set the last 128 bytes to zero */
        CLEAR_END_128(new TransformClear(128, false)),
        /** cut out one byte right at the middle */
        CUT_1BYTE_MIDDLE(new TransformCut(50)),
        /** cut out bytes from random positions */
        NOISY_CUTS(new TransformCut2(100)),
        /** duplicate bytes at random positions */
        NOISY_DUPLICATES(new TransformDup(100));

        static class TransformDup extends Transform {
            int mod;
            public TransformDup(int mod) {
                this.mod = mod;
            }
            byte[] process(byte[] data, Random rnd) {
                byte[] tmp = new byte[data.length << 1];
                int len = 0, mod = this.mod;
                boolean damaged = false;
                for (int i = 0, c = data.length; i < c; i++) {
                    if (damaged |= (0 == rnd.nextInt() % mod)) {
                        tmp[len++] = data[i];
                    }
                    tmp[len++] = data[i];
                }
                if (!damaged) {
                    // duplicate the byte right in the middle
                    int half = data.length >> 1;
                    System.arraycopy(data, 0, tmp, 0, half);
                    System.arraycopy(data, half, tmp, half + 1, data.length - half);
                    tmp[half] = tmp[half + 1];
                    len = data.length + 1;
                }
                byte[] result = new byte[len];
                System.arraycopy(tmp, 0, result, 0, len);
                return result;
            }
        }
        static class TransformCut2 extends TransformCut {
            int mod;
            public TransformCut2(int mod) {
                super(50);
                this.mod = mod;
            }
            byte[] process(byte[] data, Random rnd) {
                byte[] tmp = new byte[data.length];
                int len = 0, mod = this.mod;
                boolean damaged = false;
                for (int i = 0, c = data.length; i < c; i++) {
                    if (damaged != (0 == rnd.nextInt() % mod)) {
                        continue;
                    }
                    tmp[len++] = data[i];
                }
                if (!damaged) {
                    return super.process(data, rnd);
                }
                byte[] result = new byte[len];
                System.arraycopy(tmp, 0, result, 0, len);
                return result;
            }
        }
        static class TransformCut extends Transform {
            int pos;
            public TransformCut(int pos) {
                this.pos = pos;
            }
            byte[] process(byte[] data, Random rnd) {
                long lpos = (((data.length * 1000L) / 100) * this.pos) / 1000L;
                byte[] result = new byte[data.length - 1];
                int pos = (int)lpos;
                System.arraycopy(data, 0, result, 0, pos);
                System.arraycopy(data, pos + 1, result, pos, data.length - pos - 1);
                return result;
            }
        }
        static class TransformClear extends Transform {
            int len;
            boolean begin;
            public TransformClear(int len, boolean begin) {
                this.len = len;
                this.begin = begin;
            }
            byte[] process(byte[] data, Random rnd) {
                int len = Math.min(this.len, data.length);
                int ofs = this.begin ? 0 : data.length - len;
                Arrays.fill(data, ofs, ofs + len, (byte)0);
                return data;
            }
        }
        static class TransformBitflip extends Transform {
            int mod;
            public TransformBitflip(int mod) {
                this.mod = mod;
            }
            byte[] process(byte[] data, Random rnd) {
                boolean damaged = false;
                int mod = this.mod;
                for (int i = 0, c = data.length; i < c; i++) {
                    int r = rnd.nextInt() & Integer.MAX_VALUE;
                    if (damaged |= (0 == r % mod)) {
                        data[i] = flipRndBit(data[i], r);
                    }
                }
                if (!damaged) {
                    int r = rnd.nextInt() & Integer.MAX_VALUE;
                    int i = r % data.length;
                    data[i] = flipRndBit(data[i], r);
                }
                return data;
            }
            static byte flipRndBit(byte b, int rnd) {
                int msk = (1 << ((rnd >> 8) & 7));
                return (byte)((b & ~msk) | ((b & msk) ^ msk));
            }
        }
        static class TransformTruncate extends Transform {
            int pct;
            public TransformTruncate(int pct) {
                this.pct = pct;
            }
            byte[] process(byte[] data, Random rnd) {
                long llen = (((data.length * 1000L) / 100) * this.pct) / 1000L;
                int len = (int)(0 == llen ? 1 : llen);
                byte[] result = new byte[len];
                System.arraycopy(data, 0, result, 0, len);
                return result;
            }
        }
        abstract static class Transform {
            abstract byte[] process(byte[] data, Random rnd);
        }
        Transform transform;
        Damage(Transform t) {
            this.transform = t;
        }
        byte[] cause(byte[] data, Random rnd) {
            return this.transform.process(data, rnd);
        }
    }

    ///////////////////////////////////////////////////////////////////////////

    // FIXME: be tolerant until we find out why things tend to shake ...
    //        (theory: either internal random number generators or some
    //                 time stamp rendering we cannot control)
    final static int MAX_MISMATCHES = 0;

    final static double[] qualityLevels(String fmt) {
        fmt = fmt.toLowerCase();
        if (fmt.equals("jpeg")) {
            return new double[] { 0.05, 0.2, 0.5, 0.85, 0.95, 1.0 };
        }
        return new double[] { 1.0 };
    }

    public void test0Unsafe() throws Exception {
        File dumpDir = new File(System.getProperty("java.io.tmpdir"),
                                "imagescannertest_dumps");
        if (DUMP_FILES) {
            if (dumpDir.exists()) {
                for (File fl : dumpDir.listFiles()) {
                    assertTrue(fl.delete());
                }
            }
            else {
                assertTrue(dumpDir.mkdirs());
            }
            System.out.println("dump directory: " + dumpDir.getAbsolutePath());
        }

        PrintWriter pwnd = null;
        if (RECORD_NODETECTS) {
            pwnd = new PrintWriter(new FileOutputStream("imagescannertest_nodetects.txt"));
        }
        PrintWriter pwrc = null;
        if (RECORD_RESULTCODES) {
            pwrc = new PrintWriter(new FileOutputStream("imagescannertest_resultcodes.txt"));
        }

        ImageScanner jscan = new ImageScanner();
        ImageScanner.Result lastResult = null;

        int tabidx = 0;

        // used to create selftest data
        /*
        int opthuff = 0;
        int grayscale = 0;
        Fill fill = Fill.NOISE;
        Damage damage = Damage.CLEAR_END_10;
        double quality = 0.05;
        Resolution resolution = new Resolution(16, 16);
        */

        int mismatchesNoDetects   = 0;
        int mismatchesResultCodes = 0;

        for (ImageFormat ifmt: ImageFormat.values())
        for (int opthuff = 0; opthuff < 2; opthuff++)
        for (int grayscale = 0; grayscale < 2; grayscale++)
        for (Fill fill : Fill.values())
        for (Damage damage : Damage.values())
        for (double quality : ifmt.lossy ?
             new double[] { 0.05, 0.2, 0.5, 0.85, 0.95, 1.0 } :
             new double[] { -1 })
        for (Resolution resolution : new Resolution[] {
                new Resolution(1, 1),
                new Resolution(16, 16),
                new Resolution(320, 240),
                new Resolution(1771, 2790)
        }) {
            String info = String.format("%s %d %d %s %s %f %s",
                    ifmt.name, opthuff, grayscale, fill, damage, quality,
                    resolution.toString());
            System.out.print(info);

            File dfile = new File(dumpDir, info + "." + ifmt.defaultExtension);
            byte[] imgdata_d;
            if (USE_EXISTING) {
                RandomAccessFile raf = new RandomAccessFile(dfile, "r");
                imgdata_d = new byte[(int)raf.length()];
                raf.readFully(imgdata_d);
                raf.close();
            }
            else {
                BufferedImage img = null;
                try {
                    img = new BufferedImage(
                            resolution.width,
                            resolution.height,
                            1 == grayscale ? BufferedImage.TYPE_BYTE_GRAY :
                                             BufferedImage.TYPE_3BYTE_BGR);
                }
                catch (Throwable err) {
                    Assert.fail();
                }

                Graphics grph = img.getGraphics();

                Random rnd = this.rnd;
                int w = img.getWidth();
                int h = img.getHeight();

                switch(fill) {
                    case EMPTY: {
                        grph.setColor(Color.BLACK);
                        grph.fillRect(0, 0, w, h);
                        break;
                    }
                    case NOISE: {
                        for (int y = 0; y < h; y++) {
                            for (int x = 0; x < w; x++) {
                                img.setRGB(x, y, rnd.nextInt());
                            }
                        }
                        break;
                    }
                    case RNDBLOCKS: {
                        for (int y = 0; y < h; y += 8) {
                            for (int x = 0; x < w; x += 8) {
                                grph.setColor(new Color(rnd.nextInt()));
                                grph.fillRect(x, y, 8, 8);
                            }
                        }
                        break;
                    }
                    default: {
                        fail();
                    }
                }
                grph.dispose();

                ByteArrayOutputStream baos = new ByteArrayOutputStream();
                if (ifmt.indexed) {
                    ImageIO.write(img, ifmt.name, baos);
                }
                else {
                    ImageWriter writer = ImageIO.getImageWritersByFormatName(ifmt.name).next();
                    writer.setOutput(ImageIO.createImageOutputStream(baos));

                    ImageWriteParam iwp = writer.getDefaultWriteParam();
                    if (ifmt.name.equals("jpeg")) {
                        if (iwp instanceof JPEGImageWriteParam) {
                            JPEGImageWriteParam jiwp = (JPEGImageWriteParam)iwp;

                            jiwp.setCompressionMode(ImageWriteParam.MODE_EXPLICIT);
                            jiwp.setCompressionQuality((float)quality);
                            jiwp.setOptimizeHuffmanTables(1 == opthuff);
                        }
                        else {
                            fail();
                        }
                    }
                    writer.write(null, new IIOImage(img, null, null), iwp);
                    baos.close();
                    writer.dispose();
                    writer = null;
                    img = null;
                }
                byte[] imgdata = baos.toByteArray();
                baos = null;

                imgdata_d = imgdata.clone();
                imgdata_d = damage.cause(imgdata_d, this.rnd);

                assertTrue(ifmt == ImageFormat.BMP ||
                    Damage.NONE == damage ^
                    !BinUtils.arraysEquals(imgdata_d, imgdata));
                imgdata = null;

                if (DUMP_FILES) {
                    FileOutputStream fos = new FileOutputStream(dfile);
                    fos.write(imgdata_d);
                    fos.close();
                }
            }

            final byte[] imgdata_d_sourced = imgdata_d;
            boolean ok = jscan.scan(new ImageScanner.InputStreamSource() {
                public java.io.InputStream get() {
                    return new ByteArrayInputStream(imgdata_d_sourced);
                }
            }, ifmt, this);
            ImageScanner.Result result = jscan.lastResult();
            assertTrue(lastResult != result);
            lastResult = result;

            System.out.println(String.format(
                    " %d bytes, result type %s",
                    imgdata_d.length, result.type()));

            for (String msg : result.collapsedMessages()) {
                if (PRINT_MESSAGES) {
                    System.out.println("\t[" + msg + "]");
                }
            }

            if (RECORD_RESULTCODES) {
                pwrc.print(String.valueOf(result.type().code()));
            }
            else {
                if (result.type().code() != RESULTCODES[tabidx]) {
                    System.err.printf("mismatch at index %d\n", tabidx);
                    mismatchesResultCodes++;
                }
            }

            if (ok) {
                if (RECORD_NODETECTS) {
                    pwnd.print(damage == Damage.NONE ? "1" : "0");
                }
                else {
                    boolean nodetect = 0 == EXCLUSIONS[tabidx];
                    mismatchesNoDetects += (damage == Damage.NONE) ^ nodetect ? 0 : 1;
                    assertFalse(result.messages().iterator().hasNext());
                    assertTrue(ImageScanner.Result.Type.OK == result.type());
                }
            }
            else {
                if (RECORD_NODETECTS) {
                    pwnd.print("1");
                }
                if (DO_VERIFY) {
                    assertTrue(damage != Damage.NONE);
                    assertTrue(ImageScanner.Result.Type.OK != result.type());
                    assertTrue(result.messages().iterator().hasNext());
                    assertTrue(result.collapsedMessages().iterator().hasNext());
                    int ccm = 0;
                    Iterator<String> it = result.collapsedMessages().iterator();
                    while (it.hasNext()) {
                        assertNotNull(it.next());
                        ccm++;
                    }
                    it = result.messages().iterator();
                    int cm = 0;
                    while (it.hasNext()) {
                        cm++;
                        String msg = it.next();
                        int found = 0;
                        Iterator<String> itc = result.collapsedMessages().iterator();
                        while (itc.hasNext()) {
                            if (itc.next().equals(msg)) {
                                found++;
                            }
                        }
                        assertTrue(1 == found);
                    }
                    assertTrue(cm >= ccm);
                }
            }
            tabidx++;

            if (RECORD_NODETECTS) {
                pwnd.print(0 == (tabidx & 31) ? ",\r\n        " : ",");
                pwnd.flush();
            }
            if (RECORD_RESULTCODES) {
                pwrc.print(0 == (tabidx & 31) ? ",\r\n        " : ",");
                pwrc.flush();
            }
        }
        if (DO_VERIFY) {
            assertTrue(-1 == EXCLUSIONS [tabidx]);
            assertTrue(-1 == RESULTCODES[tabidx]);
        }
        if (null != pwnd) {
            pwnd.println("-1");
            pwnd.close();
        }
        if (null != pwrc) {
            pwrc.println("-1");
            pwrc.close();
        }
        if (0 != mismatchesResultCodes ||
            0 != mismatchesNoDetects) {
            System.err.printf(
                    "%d result code mismatches\n%d no detects mismatches",
                    mismatchesResultCodes,
                    mismatchesNoDetects);
        }
        if (DO_VERIFY) {
            assertTrue(mismatchesResultCodes <= MAX_MISMATCHES);
            assertTrue(mismatchesNoDetects   <= MAX_MISMATCHES);
        }
    }

    @Test
    public void test0() throws Exception {
        try {
            test0Unsafe();
        }
        catch (Throwable uncaught) {
            System.out.flush();
            System.err.printf("\n!!!UNCAUGHT ERROR!!!\n%s\n", uncaught.getMessage());
            uncaught.printStackTrace(System.err);
            System.err.flush();
            fail();
        }
    }

    public boolean onProgress(double percent) {
        return true;
    }

    static byte[] EXCLUSIONS = new byte[] {
        1,1,1,1,1,1,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,1,1,0,0,0,0,0,0,
        0,0,1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,1,0,0,1,1,0,0,0,0,
        1,1,1,1,1,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,
        0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,
        1,1,1,1,1,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,
        0,0,0,0,0,0,1,1,0,0,1,1,0,0,0,0,1,1,1,1,1,1,0,0,1,1,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,1,1,0,0,0,0,
        1,1,1,1,1,1,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,0,0,1,1,0,0,0,0,0,0,
        0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,1,0,0,1,1,0,0,0,0,
        1,1,1,1,1,1,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,1,0,0,0,
        0,0,0,0,0,0,1,1,0,0,1,1,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,
        1,1,1,1,1,1,0,0,1,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,
        0,0,0,0,0,0,1,1,0,0,1,1,0,0,0,0,1,1,1,1,1,1,0,0,1,1,0,0,0,0,0,0,
        0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,1,0,0,1,1,0,0,0,0,
        1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
        1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,
        1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
        1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
        1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,
        1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
        1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
        1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,
        0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
        1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
        1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,
        1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
        1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
        1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,
        1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
        1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
        1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,
        1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
        1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,0,0,0,0,0,1,0,1,1,1,1,0,0,0,0,
        1,0,0,0,1,1,1,0,1,1,1,0,0,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,
        1,0,0,0,1,1,1,0,1,1,1,1,0,0,0,0,1,0,0,0,1,1,1,0,1,1,1,0,0,0,0,1,
        1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,0,0,0,0,0,0,1,1,1,1,0,0,0,0,
        1,0,0,0,1,1,1,0,1,1,1,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
        0,0,0,0,0,0,1,0,1,1,1,1,0,0,0,0,0,0,0,0,0,1,1,0,0,1,1,0,0,0,0,1,
        1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,1,0,0,1,1,1,1,1,0,0,0,0,
        0,0,0,0,0,1,1,0,0,1,1,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
        0,0,0,0,0,1,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,1,1,0,0,1,1,0,0,0,0,0,
        1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,0,0,0,0,1,0,1,1,1,1,1,0,0,0,0,
        1,0,0,0,1,1,1,0,1,1,1,0,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,
        0,1,0,0,1,0,0,0,1,1,1,1,0,0,0,0,1,0,0,0,1,1,1,0,1,1,1,0,0,0,0,0,
        1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,0,0,0,1,0,0,0,1,1,1,1,0,0,0,0,
        1,0,0,0,1,1,1,0,1,1,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
        0,0,0,1,0,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,1,1,0,0,1,1,0,0,1,0,0,
        1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,
        0,0,0,0,0,1,1,0,0,1,1,0,0,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
        0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,1,1,0,0,1,1,0,0,1,0,0,
        1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
        1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
        1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
        1,0,1,1,0,1,1,1,1,0,1,1,0,0,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
        1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
        1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
        1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
        1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
        1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
        1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
        1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
        1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
        1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,
        1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
        1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
        1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,
        1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,0,0,1,1,0,1,
        1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
        1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
        1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
        1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
        1,1,1,1,1,0,1,1,0,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,
        1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
        1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
        1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
        1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,0,1,1,1,0,1,1,1,0,1,
        1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
        1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
        1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
        1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
        1,0,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,
        1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
        1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
        1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
        1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
        1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
        1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
        1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
        1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
        0,1,1,1,0,0,1,1,1,1,1,1,0,1,1,1,0,1,1,1,0,0,1,1,1,0,1,1,1,1,1,1,
        1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
        1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
        1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,
        1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,0,0,1,1,0,1,1,1,1,1,
        1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
        1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
        1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
        1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
        1,1,1,1,0,1,1,1,1,0,0,1,1,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,
        1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
        1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
        1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
        1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
        1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
        1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
        1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
        1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
        1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,
        1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
        1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
        1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
        1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
        1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
        1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
        1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
        1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
        1,0,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
        1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
        1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
        1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,0,0,
        1,1,0,0,1,1,0,1,1,1,1,0,1,1,0,0,1,1,0,1,1,1,1,0,1,1,0,0,1,1,1,1,
        1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
        1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
        1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
        1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
        1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
        1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
        1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
        1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,
        1,1,0,0,1,1,0,1,1,1,0,0,1,1,0,0,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,0,
        1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
        1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
        1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
        1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
        1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,0,0,1,1,0,0,1,1,0,1,1,1,1,1,1,1,
        1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
        1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
        1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
        1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
        1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
        1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
        1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
        1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
        1,1,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,0,1,1,1,1,1,1,1,1,1,1,1,
        0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
        1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
        1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,
        1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,1,1,1,1,0,1,1,1,0,1,1,1,1,
        1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
        1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
        1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
        1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
        1,1,1,1,1,0,1,1,1,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,
        1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
        1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
        1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
        1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
        1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
        -1
    };

    static byte[] RESULTCODES = new byte[] {
        0,0,0,0,2,2,0,0,2,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,2,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,0,0,2,2,0,0,0,0,0,0,
        0,0,1,0,0,0,0,2,0,0,0,0,2,0,0,0,0,0,0,0,0,0,1,2,0,0,1,1,0,0,0,0,
        0,0,0,0,2,2,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,
        0,0,0,0,0,0,2,1,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,
        0,0,0,0,2,2,0,0,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,2,0,0,0,
        0,0,0,0,0,0,1,1,0,0,1,2,0,0,0,0,0,0,0,0,2,2,0,0,2,2,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,2,0,0,2,2,0,0,0,0,
        0,0,0,0,2,2,0,0,2,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,2,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,2,2,0,0,2,2,0,0,0,0,0,0,
        0,0,1,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,1,1,0,0,1,1,0,0,0,0,
        0,0,0,0,2,2,0,0,2,0,0,0,0,0,0,0,0,0,0,2,0,0,0,2,0,0,0,0,2,0,0,0,
        0,0,0,0,0,0,2,1,0,0,2,2,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,
        0,0,0,0,2,2,0,0,2,2,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,2,0,0,0,
        0,0,0,0,0,0,1,1,0,0,1,1,0,0,0,0,0,0,0,0,2,2,0,0,2,2,0,0,0,0,0,0,
        0,0,0,2,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,1,1,0,0,2,2,0,0,0,0,
        0,0,0,0,2,2,2,2,2,2,2,2,0,0,0,2,2,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,
        2,2,2,2,2,2,2,2,2,2,2,2,0,2,2,2,0,0,0,0,2,2,2,2,2,2,2,2,0,2,2,2,
        2,2,2,2,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,
        0,0,0,0,2,2,2,2,2,2,2,2,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,
        2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,2,2,2,2,2,2,2,2,0,0,0,2,
        2,2,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,
        0,0,0,0,2,2,2,2,2,2,2,2,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,
        2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,2,2,2,2,2,2,2,2,0,0,2,2,
        0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,
        0,0,0,0,2,2,2,2,2,2,2,2,0,0,0,2,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,
        2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,2,2,2,2,2,2,2,2,0,2,2,2,
        2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,
        0,0,0,0,2,2,2,2,2,2,2,2,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,
        2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,2,2,2,2,2,2,2,2,0,0,0,2,
        2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,
        0,0,0,0,2,2,2,2,2,2,2,2,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,
        2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,2,2,2,2,2,2,2,2,0,0,2,2,
        2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,
        0,0,0,0,2,2,2,2,2,2,2,2,0,2,2,2,0,0,0,0,0,0,2,0,2,2,2,2,0,0,0,0,
        2,0,0,0,2,2,2,0,2,2,2,0,0,2,0,0,0,0,0,0,2,2,2,2,2,2,2,2,0,2,2,2,
        2,0,0,0,2,2,2,0,2,2,2,2,0,0,0,0,2,0,0,0,2,2,2,0,2,2,2,0,0,0,0,2,
        0,0,0,0,2,2,2,2,2,2,2,2,0,2,2,2,2,2,0,0,0,0,0,0,2,2,2,2,0,0,0,0,
        2,0,0,0,2,2,2,0,2,2,2,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,
        0,0,0,0,0,0,2,0,2,2,2,2,0,0,0,0,0,0,0,0,0,2,2,0,0,2,2,0,0,0,0,2,
        0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,2,0,0,2,2,2,2,2,0,0,0,0,
        0,0,0,0,0,2,2,0,0,2,2,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,
        0,0,0,0,0,2,0,0,2,2,2,2,0,0,0,0,0,0,0,0,0,2,2,0,0,2,2,0,0,0,0,0,
        0,0,0,0,2,2,2,2,2,2,2,2,0,2,2,2,0,0,0,0,0,2,0,2,2,2,2,2,0,0,0,0,
        2,0,0,0,2,2,2,0,2,2,2,0,2,2,0,0,0,0,0,0,2,2,2,2,2,2,2,2,0,2,2,2,
        0,2,0,0,2,0,0,0,2,2,2,2,0,0,0,0,2,0,0,0,2,2,2,0,2,2,2,0,0,0,0,0,
        0,0,0,0,2,2,2,2,2,2,2,2,0,2,2,2,2,0,0,0,2,0,0,0,2,2,2,2,0,0,0,0,
        2,0,0,0,2,2,2,0,2,2,2,0,2,0,2,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,
        0,0,0,2,0,0,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,2,2,0,0,2,2,0,0,2,0,0,
        0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,2,2,2,2,0,0,0,0,
        0,0,0,0,0,2,2,0,0,2,2,0,0,0,2,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,
        0,0,0,0,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,2,2,0,0,2,2,0,0,2,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,1,2,2,2,1,
        2,2,2,1,2,2,2,1,2,2,2,1,2,2,2,1,2,2,1,1,2,2,1,1,2,2,1,1,2,2,1,1,
        2,2,1,1,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
        2,0,1,2,0,2,2,2,2,0,2,2,0,0,2,2,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,
        2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,
        2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
        2,2,1,1,2,2,1,1,2,2,1,1,2,2,1,1,2,2,1,1,2,2,1,1,2,2,1,1,2,2,1,1,
        2,2,1,1,2,2,1,1,2,2,1,1,2,2,1,1,2,2,1,1,2,2,1,1,2,2,1,1,2,2,1,1,
        2,2,1,1,2,2,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,1,2,2,1,1,
        2,2,1,1,2,2,1,1,2,2,1,1,2,2,1,1,2,2,1,1,2,2,1,1,2,2,1,1,2,2,1,1,
        2,2,1,1,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
        2,2,1,2,2,2,2,2,0,0,2,2,2,1,2,2,2,1,2,2,0,2,2,2,2,2,2,2,2,2,2,2,
        2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,
        2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
        2,2,1,1,2,2,1,1,2,2,1,1,2,1,1,1,2,1,1,1,2,1,1,1,2,2,1,1,2,2,0,0,
        2,2,0,0,2,2,1,1,2,2,1,1,2,2,1,1,2,2,1,1,2,2,0,0,2,2,0,0,2,2,0,1,
        2,2,1,1,2,2,2,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,1,2,2,2,1,
        2,2,1,1,2,2,1,1,2,2,1,1,2,2,1,1,2,2,1,1,2,2,1,1,2,2,1,1,2,2,1,1,
        2,2,1,1,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
        2,2,2,2,2,0,1,2,0,2,1,2,2,0,2,2,2,2,1,2,2,0,2,2,2,2,2,2,2,2,2,2,
        2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,
        2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
        2,2,1,1,2,2,1,1,2,2,1,1,2,2,1,1,2,2,1,1,2,2,1,1,2,2,1,1,2,2,1,1,
        2,2,1,0,2,2,1,1,2,2,1,1,2,2,1,0,2,2,1,1,2,2,0,1,2,2,0,1,2,2,0,1,
        2,2,0,0,2,2,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,1,2,2,2,1,
        2,2,2,1,2,2,2,1,2,2,2,1,2,2,2,1,2,2,1,1,2,2,1,1,2,2,1,1,2,2,1,1,
        2,2,1,1,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
        2,0,2,2,2,2,1,2,2,2,1,2,0,1,1,1,2,2,1,2,2,2,1,2,0,2,2,2,2,2,2,2,
        2,2,2,2,2,2,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,
        2,2,2,2,2,2,2,2,2,1,1,1,2,1,1,1,2,1,1,1,2,1,1,1,2,1,1,1,1,1,1,1,
        2,2,1,1,2,2,1,1,2,2,1,1,2,2,1,1,2,2,1,1,2,2,1,1,2,2,1,1,2,2,1,1,
        2,2,1,1,2,2,1,1,2,2,1,1,2,2,1,1,2,2,1,1,2,2,1,1,2,2,1,1,2,2,1,1,
        2,2,1,1,2,2,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,1,1,2,2,1,1,
        2,2,1,1,2,2,1,1,2,2,1,1,2,2,1,1,2,2,1,1,2,2,1,1,2,2,1,1,2,2,1,1,
        2,2,1,1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
        0,2,2,2,0,0,2,2,2,2,2,2,0,1,1,2,0,2,2,2,0,0,2,2,2,0,2,2,2,2,2,2,
        2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,
        2,2,2,2,2,2,2,2,2,1,1,1,2,1,1,1,2,1,1,1,2,1,1,1,2,1,1,1,2,1,1,1,
        2,2,1,1,2,2,1,1,2,2,1,1,2,1,1,1,2,1,1,1,2,1,1,1,2,2,1,1,2,2,0,0,
        2,2,0,0,2,2,1,1,2,2,1,1,2,1,1,1,2,2,1,0,2,2,0,0,2,2,0,1,2,2,1,1,
        2,2,1,1,2,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,1,2,2,1,2,2,2,2,2,2,2,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,1,2,2,2,1,
        2,2,2,1,2,2,2,1,2,2,2,1,2,2,1,1,2,2,1,1,2,2,1,1,2,2,1,1,2,2,1,1,
        2,2,1,1,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
        2,2,1,2,0,2,2,2,2,0,0,1,2,0,2,2,2,2,2,2,2,0,2,2,2,2,2,2,2,2,2,2,
        2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,
        2,2,2,2,2,2,2,2,2,1,1,1,2,1,1,1,2,1,1,1,2,1,1,1,2,1,1,1,2,1,1,1,
        2,2,1,1,2,2,1,1,2,2,1,1,2,2,1,1,2,2,1,1,2,2,1,1,2,2,1,1,2,2,1,1,
        2,2,1,1,2,2,1,1,2,2,1,0,2,2,1,1,2,2,1,1,2,2,1,1,2,2,1,1,2,2,1,1,
        2,2,1,1,2,2,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,1,2,2,2,1,
        2,2,2,1,2,2,2,1,2,2,2,1,2,2,2,1,2,2,1,1,2,2,1,1,2,2,1,1,2,2,1,1,
        2,2,1,1,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
        2,0,2,1,2,0,1,1,2,2,2,1,2,2,1,1,0,2,2,1,2,0,2,2,2,2,2,2,2,2,2,2,
        2,2,2,2,2,2,2,2,2,2,2,2,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,
        2,2,2,2,2,2,2,2,2,2,1,1,2,2,1,1,2,2,1,1,2,2,1,1,2,2,1,1,2,2,1,1,
        2,2,1,1,2,2,1,1,2,2,1,1,2,2,1,1,2,2,1,1,2,2,1,1,2,2,1,1,2,2,1,1,
        2,2,1,1,2,2,1,1,2,2,1,1,2,2,1,1,2,2,1,1,2,2,1,1,2,2,1,1,2,2,1,1,
        2,2,1,1,2,2,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,1,1,2,2,1,1,
        2,2,1,1,2,2,1,1,2,2,1,1,2,2,1,1,2,2,1,1,2,2,1,1,2,2,1,1,2,2,1,1,
        2,2,1,1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
        2,0,2,2,0,1,1,2,2,2,2,2,2,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,2,2,
        2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,
        2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
        2,2,1,1,2,2,1,1,2,2,1,1,2,1,1,1,2,1,1,1,2,1,1,1,2,2,0,0,2,2,0,0,
        2,2,0,0,2,2,0,1,2,2,1,0,2,1,0,0,2,2,0,1,2,2,1,0,2,2,0,0,2,2,1,1,
        2,2,1,1,2,1,0,1,2,2,1,2,2,2,2,2,2,2,2,2,2,2,1,2,2,2,2,2,2,2,2,2,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,1,2,2,1,1,
        2,2,1,1,2,2,1,1,2,2,1,1,2,2,1,1,2,2,1,1,2,2,1,1,2,2,1,1,2,2,1,1,
        2,2,1,1,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
        2,1,1,1,2,2,1,2,2,2,2,2,1,1,2,2,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,
        2,2,2,2,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,
        2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
        2,2,1,1,2,2,1,1,2,2,1,1,2,2,1,1,2,2,1,1,2,2,1,1,2,2,1,1,2,2,1,0,
        2,2,0,0,2,2,0,1,2,2,0,0,2,2,0,0,2,2,1,1,2,2,1,1,2,2,0,1,2,2,0,0,
        2,2,1,1,2,2,1,1,2,2,2,2,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,1,2,2,2,1,
        2,2,2,1,2,2,2,1,2,2,2,1,2,2,2,1,2,2,1,1,2,2,1,1,2,2,1,1,2,2,1,1,
        2,2,1,1,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
        2,2,2,2,2,0,2,1,2,2,2,2,2,2,1,2,0,0,1,2,0,0,1,1,0,2,2,2,2,2,2,2,
        2,2,2,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,
        2,2,2,2,2,2,2,2,2,2,1,1,2,2,1,1,2,2,1,1,2,2,1,1,2,2,1,1,2,2,1,1,
        2,2,1,1,2,2,1,1,2,2,1,1,2,2,1,1,2,2,1,1,2,2,1,1,2,2,1,1,2,2,1,1,
        2,2,1,1,2,2,1,1,2,2,1,1,2,2,1,1,2,2,1,1,2,2,1,1,2,2,1,1,2,2,1,1,
        2,2,1,1,2,2,1,1,0,0,2,2,2,2,2,2,2,2,2,2,1,1,2,2,1,2,2,2,2,1,2,2,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,1,1,2,2,1,1,
        2,2,1,1,2,2,1,1,2,2,1,1,2,2,1,1,2,2,1,1,2,2,1,1,2,2,1,1,2,2,1,1,
        2,1,1,1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
        2,2,2,2,2,0,2,2,1,0,2,2,1,0,2,2,2,0,2,2,0,2,2,2,2,2,2,2,2,2,2,2,
        0,2,2,2,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,
        2,2,2,2,2,2,2,2,2,1,1,1,2,1,1,1,2,1,1,1,2,1,1,1,2,1,1,1,2,1,1,1,
        2,2,1,1,2,2,1,1,2,2,1,1,2,1,1,1,2,1,1,1,2,1,1,1,2,2,1,1,2,2,0,0,
        2,2,0,0,2,2,0,0,2,1,0,0,2,1,0,0,2,2,0,1,2,2,1,0,2,2,1,0,2,2,1,1,
        2,1,1,1,2,0,0,0,2,2,1,2,2,2,2,1,2,1,2,2,2,2,2,1,2,2,2,2,2,2,2,2,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,1,2,2,2,1,
        2,2,2,1,2,2,1,1,2,2,1,1,2,2,1,1,2,2,1,1,2,2,1,1,2,2,1,1,2,2,1,1,
        2,2,1,1,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
        2,2,1,2,2,0,1,2,2,2,1,2,0,2,1,2,0,2,2,2,2,2,1,2,2,0,2,2,2,2,2,2,
        2,2,2,2,2,2,2,1,2,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,
        2,2,2,2,2,2,2,2,2,2,1,1,2,1,1,1,2,1,1,1,2,1,1,1,2,1,1,1,2,1,1,1,
        2,2,1,1,2,2,1,1,2,2,1,1,2,2,1,1,2,2,1,1,2,2,1,1,2,2,1,1,2,2,1,1,
        2,2,1,1,2,2,1,1,2,2,1,1,2,2,1,1,2,2,1,1,2,2,1,1,2,2,1,1,2,2,1,1,
        2,2,1,1,2,2,1,1,2,2,2,2,2,2,2,2,2,2,2,2,1,2,2,2,2,1,1,2,2,2,2,2,
        -1
    };

    @Test
    public void testSelfTest() {
        assertTrue(ImageScanner.selfTest());
    }
}
